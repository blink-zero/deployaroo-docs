---
# Playbook: vmware_create_linux_ubuntu22.04_splunk
# Version: 1.0
# Description: This playbook automates the deployment of a Ubuntu 22.04 virtual machine with native Splunk Enterprise installation

- name: Deploy Linux Template
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    name: "{{ guest_hostname }}"
    folder: "{{ vm_folder }}"
    state: "{{ vm_state }}"
    guest_id: "{{ vm_guestid }}"
    esxi_hostname: "{{ esxi_host }}"
    template: "{{ template_name }}"
    disk:
      - size_gb: "{{ lin_disk_size }}"
        type: "{{ vm_type }}"
        datastore: "{{ vm_disk_datastore }}"
    hardware:
      memory_mb: "{{ guest_vram }}"
      num_cpus: "{{ guest_vcpu }}"
      scsi: "{{ vm_hw_scsi }}"
    networks:
      - name: "{{ vm_net_name }}"
        ip: "{{ inventory_hostname }}"
        netmask: "{{ netmask }}"
        gateway: "{{ gateway }}"
    customization:
      dns_servers:
        - "{{ dns1 }}"
        - "{{ dns2 }}"
    wait_for_ip_address: True
  delegate_to: localhost

- name: Add host to Ansible inventory
  ansible.builtin.add_host:
    hostname: '{{ inventory_hostname }}'
    ansible_user: '{{ linux_template_username }}'
    ansible_password: '{{ linux_template_password }}'
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

- name: Debug - Check connectivity to the new host
  wait_for:
    host: '{{ inventory_hostname }}'
    port: 22
    timeout: 30

- name: Wait for system to become reachable over SSH
  wait_for_connection:
    timeout: 900
    connect_timeout: 60
    sleep: 10
    delay: 0
  delegate_to: '{{ inventory_hostname }}'

- name: Update and upgrade apt packages
  apt:
    upgrade: yes
    update_cache: yes
    cache_valid_time: 86400
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# System Configuration
- name: Configure system limits for Splunk
  pam_limits:
    domain: '*'
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  loop:
    - { limit_type: '-', limit_item: 'nofile', value: '64000' }
    - { limit_type: '-', limit_item: 'nproc', value: '16000' }
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Create Splunk user
- name: Create splunk group
  group:
    name: splunk
    state: present
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Create splunk user
  user:
    name: splunk
    group: splunk
    shell: /bin/bash
    createhome: yes
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Download and Install Splunk
- name: Download Splunk Enterprise DEB package
  get_url:
    url: https://download.splunk.com/products/splunk/releases/9.3.2/linux/splunk-9.3.2-d8bb32809498-linux-2.6-amd64.deb
    dest: /tmp/splunk.deb
    mode: '0644'
  delegate_to: '{{ inventory_hostname }}'

- name: Install Splunk Enterprise
  apt:
    deb: /tmp/splunk.deb
    state: present
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Configure Splunk
- name: Set ownership of Splunk directory
  file:
    path: /opt/splunk
    owner: splunk
    group: splunk
    recurse: yes
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Create user-seed.conf for automated admin setup
  copy:
    content: |
      [user_info]
      USERNAME = admin
      PASSWORD = supersecretpassword
    dest: /opt/splunk/etc/system/local/user-seed.conf
    owner: splunk
    group: splunk
    mode: '0600'
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Configure UFW firewall
- name: Install UFW
  apt:
    name: ufw
    state: present
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Configure UFW rules
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { rule: 'allow', port: '22', proto: 'tcp' }           # SSH
    - { rule: 'allow', port: '8000', proto: 'tcp' }         # Splunk Web Interface
    - { rule: 'allow', port: '8089', proto: 'tcp' }         # Splunk Management/REST API
    - { rule: 'allow', port: '9997', proto: 'tcp' }         # Splunk Forwarder Data (S2S)
    - { rule: 'allow', port: '514', proto: 'tcp' }          # Syslog TCP
    - { rule: 'allow', port: '514', proto: 'udp' }          # Syslog UDP
    - { rule: 'allow', port: '8088', proto: 'tcp' }         # HEC (HTTP Event Collector)
    - { rule: 'allow', port: '1514', proto: 'tcp' }         # Alternative Syslog port
    - { rule: 'allow', port: '1514', proto: 'udp' }         # Alternative Syslog port
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Enable UFW
  ufw:
    state: enabled
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Start Splunk
- name: Accept license and start Splunk
  command: "{{ item }}"
  loop:
    - /opt/splunk/bin/splunk start --accept-license --no-prompt
    - /opt/splunk/bin/splunk enable boot-start -user splunk
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Wait for Splunk Web to become available
  uri:
    url: "http://{{ inventory_hostname }}:8000"
    status_code: 200
    return_content: yes
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  delegate_to: localhost

# Cleanup
- name: Remove Splunk installation package
  file:
    path: /tmp/splunk.deb
    state: absent
  become: yes
  delegate_to: '{{ inventory_hostname }}'