---
# Playbook: vmware_create_linux_ubuntu22.04_splunkcontainer
# Version: 1.0
# Description: This playbook automates the deployment of a Ubuntu 22.04 virtual machine with Splunk Enterprise in Docker.

- name: Deploy Linux Template
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    name: "{{ guest_hostname }}"
    folder: "{{ vm_folder }}"
    state: "{{ vm_state }}"
    guest_id: "{{ vm_guestid }}"
    esxi_hostname: "{{ esxi_host }}"
    template: "{{ template_name }}"
    disk:
      - size_gb: "{{ lin_disk_size }}"
        type: "{{ vm_type }}"
        datastore: "{{ vm_disk_datastore }}"
    hardware:
      memory_mb: "{{ guest_vram }}"
      num_cpus: "{{ guest_vcpu }}"
      scsi: "{{ vm_hw_scsi }}"
    networks:
      - name: "{{ vm_net_name }}"
        ip: "{{ inventory_hostname }}"
        netmask: "{{ netmask }}"
        gateway: "{{ gateway }}"
    customization:
      dns_servers:
        - "{{ dns1 }}"
        - "{{ dns2 }}"
    wait_for_ip_address: True
  delegate_to: localhost

- name: Add host to Ansible inventory
  ansible.builtin.add_host:
    hostname: '{{ inventory_hostname }}'
    ansible_user: '{{ linux_template_username }}'
    ansible_password: '{{ linux_template_password }}'
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

- name: Debug - Check connectivity to the new host
  wait_for:
    host: '{{ inventory_hostname }}'
    port: 22
    timeout: 30

- name: Wait for system to become reachable over SSH
  wait_for_connection:
    timeout: 900
    connect_timeout: 60
    sleep: 10
    delay: 0
  delegate_to: '{{ inventory_hostname }}'

- name: Update and upgrade apt packages
  apt:
    upgrade: yes
    update_cache: yes
    cache_valid_time: 86400
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Install Docker using convenience script
  shell: |
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Configure UFW firewall
- name: Install UFW
  apt:
    name: ufw
    state: present
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Configure UFW rules
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { rule: 'allow', port: '22', proto: 'tcp' }           # SSH
    - { rule: 'allow', port: '8000', proto: 'tcp' }         # Splunk Web Interface
    - { rule: 'allow', port: '8089', proto: 'tcp' }         # Splunk Management/REST API
    - { rule: 'allow', port: '9997', proto: 'tcp' }         # Splunk Forwarder Data (S2S)
    - { rule: 'allow', port: '514', proto: 'tcp' }          # Syslog TCP
    - { rule: 'allow', port: '514', proto: 'udp' }          # Syslog UDP
    - { rule: 'allow', port: '8088', proto: 'tcp' }         # HEC (HTTP Event Collector)
    - { rule: 'allow', port: '1514', proto: 'tcp' }         # Alternative Syslog port
    - { rule: 'allow', port: '1514', proto: 'udp' }         # Alternative Syslog port
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Enable UFW
  ufw:
    state: enabled
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Pull and run Splunk Enterprise container
- name: Pull Splunk Enterprise Docker image
  docker_image:
    name: splunk/splunk
    source: pull
    tag: latest
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Run Splunk Enterprise container
  docker_container:
    name: splunk
    image: splunk/splunk:latest
    state: started
    restart_policy: always
    ports:
      - "8000:8000"      # Web Interface
      - "8089:8089"      # Management Port
      - "9997:9997"      # Splunk Forwarder Data
      - "514:514"        # Syslog TCP
      - "514:514/udp"    # Syslog UDP
      - "8088:8088"      # HEC
      - "1514:1514"      # Alternative Syslog TCP
      - "1514:1514/udp"  # Alternative Syslog UDP
    env:
      SPLUNK_START_ARGS: "--accept-license"
      SPLUNK_PASSWORD: "supersecretpassword"
    volumes:
      - splunk_etc:/opt/splunk/etc
      - splunk_var:/opt/splunk/var
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Wait for Splunk Web to become available
  uri:
    url: "http://{{ inventory_hostname }}:8000"
    status_code: 200
    return_content: yes
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  delegate_to: localhost