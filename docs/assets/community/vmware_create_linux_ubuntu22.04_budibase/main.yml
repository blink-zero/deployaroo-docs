---
# Playbook: vmware_create_linux_ubuntu22.04_budibase
# Version: 1.0
# Date: 2024-09-30
# Author: blink-zero
# Description: This playbook automates the deployment of a Ubuntu 22.04 virtual machine with Budibase installed in a Docker Container.

- name: Deploy Linux Template
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"       # vCenter server hostname
    username: "{{ vcenter_username }}"       # vCenter server username
    password: "{{ vcenter_password }}"       # vCenter server password
    validate_certs: "{{ vcenter_validate_certs }}"  # Whether to validate SSL certificates
    datacenter: "{{ vcenter_datacenter }}"   # Datacenter name
    name: "{{ guest_hostname }}"             # Name of the new virtual machine
    folder: "{{ vm_folder }}"                # Folder in which to create the VM
    state: "{{ vm_state }}"                  # Desired state of the VM (present/absent)
    guest_id: "{{ vm_guestid }}"             # Guest OS identifier
    esxi_hostname: "{{ esxi_host }}"         # ESXi host on which to deploy the VM
    template: "{{ template_name }}"          # Name of the template to use for the VM
    disk:
      - size_gb: "{{ lin_disk_size }}"       # Size of the VM disk in GB
        type: "{{ vm_type }}"                # Disk type (thin/thick)
        datastore: "{{ vm_disk_datastore }}" # Datastore for the VM disk
    hardware:
      memory_mb: "{{ guest_vram }}"          # Memory size in MB
      num_cpus: "{{ guest_vcpu }}"           # Number of CPUs
      scsi: "{{ vm_hw_scsi }}"               # SCSI controller type
    networks:
      - name: "{{ vm_net_name }}"            # Network name
        ip: "{{ inventory_hostname }}"       # IP address of the VM
        netmask: "{{ netmask }}"             # Network mask
        gateway: "{{ gateway }}"             # Gateway address
    customization:
      dns_servers:
        - "{{ dns1 }}"                       # Primary DNS server
        - "{{ dns2 }}"                       # Secondary DNS server
    wait_for_ip_address: True                # Wait for the IP address to be assigned
  delegate_to: localhost

- name: Add host to Ansible inventory
  ansible.builtin.add_host:
    hostname: '{{ inventory_hostname }}'           # Hostname of the new VM
    ansible_user: '{{ linux_template_username }}'  # SSH username for the new VM
    ansible_password: '{{ linux_template_password }}'  # SSH password for the new VM
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'  # SSH options

- name: Debug - Check connectivity to the new host
  wait_for:
    host: '{{ inventory_hostname }}'         # Hostname to check
    port: 22                                 # Port to check (SSH)
    timeout: 30                              # Timeout in seconds

- name: Wait for system to become reachable over SSH
  wait_for_connection:
    timeout: 900                             # Timeout in seconds
    connect_timeout: 60                      # Connection timeout in seconds
    sleep: 10                                # Sleep time between retries
    delay: 0                                 # Initial delay
  delegate_to: '{{ inventory_hostname }}'

- name: Update and upgrade apt packages
  apt:
    upgrade: yes                             # Upgrade apt packages
    update_cache: yes                        # Update the apt package cache
    cache_valid_time: 86400                  # Cache validity time in seconds
  become: yes                                # Run the task as root
  delegate_to: '{{ inventory_hostname }}'

# Install Docker using convenience script
- name: Install Docker using convenience script
  shell: |
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Install Docker Compose
  apt:
    name:
      - docker-compose-plugin
    state: present
    update_cache: yes
  become: yes
  delegate_to: '{{ inventory_hostname }}'

# Install Budibase

- name: Create Budibase data directory
  file:
    path: /opt/budibase
    state: directory
    owner: 1000  # Adjust UID if needed
    group: 1000  # Adjust GID if needed
    mode: '0755'
  become: yes
  delegate_to: '{{ inventory_hostname }}'

- name: Create .env file for Budibase
  copy:
    content: |
      MAIN_PORT=10000
      API_ENCRYPTION_KEY=testsecret
      JWT_SECRET=testsecret
      MINIO_ACCESS_KEY=budibase
      MINIO_SECRET_KEY=budibase
      COUCH_DB_PASSWORD=budibase
      COUCH_DB_USER=budibase
      REDIS_PASSWORD=budibase
      INTERNAL_API_KEY=budibase
      APP_PORT=4002
      WORKER_PORT=4003
      MINIO_PORT=4004
      COUCH_DB_PORT=4005
      REDIS_PORT=6379
      BB_ADMIN_USER_EMAIL=
      BB_ADMIN_USER_PASSWORD=
      PLUGINS_DIR=
      OFFLINE_MODE=
    dest: /opt/budibase/.env
  delegate_to: '{{ inventory_hostname }}'

- name: Create docker-compose.yml file for Budibase
  copy:
    content: |
      version: "3"

      services:
        app-service:
          restart: unless-stopped
          image: budibase.docker.scarf.sh/budibase/apps
          container_name: bbapps
          environment:
            SELF_HOSTED: 1
            COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
            WORKER_URL: http://worker-service:4003
            MINIO_URL: http://minio-service:9000
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            BUDIBASE_ENVIRONMENT: ${BUDIBASE_ENVIRONMENT}
            PORT: 4002
            API_ENCRYPTION_KEY: ${API_ENCRYPTION_KEY}
            JWT_SECRET: ${JWT_SECRET}
            LOG_LEVEL: info
            ENABLE_ANALYTICS: "true"
            REDIS_URL: redis-service:6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            BB_ADMIN_USER_EMAIL: ${BB_ADMIN_USER_EMAIL}
            BB_ADMIN_USER_PASSWORD: ${BB_ADMIN_USER_PASSWORD}
            PLUGINS_DIR: ${PLUGINS_DIR}
            OFFLINE_MODE: ${OFFLINE_MODE:-}
          depends_on:
            - worker-service
            - redis-service

        worker-service:
          restart: unless-stopped
          image: budibase.docker.scarf.sh/budibase/worker
          container_name: bbworker
          environment:
            SELF_HOSTED: 1
            PORT: 4003
            CLUSTER_PORT: ${MAIN_PORT}
            API_ENCRYPTION_KEY: ${API_ENCRYPTION_KEY}
            JWT_SECRET: ${JWT_SECRET}
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            MINIO_URL: http://minio-service:9000
            APPS_URL: http://app-service:4002
            COUCH_DB_USERNAME: ${COUCH_DB_USER}
            COUCH_DB_PASSWORD: ${COUCH_DB_PASSWORD}
            COUCH_DB_URL: http://${COUCH_DB_USER}:${COUCH_DB_PASSWORD}@couchdb-service:5984
            INTERNAL_API_KEY: ${INTERNAL_API_KEY}
            REDIS_URL: redis-service:6379
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            OFFLINE_MODE: ${OFFLINE_MODE:-}
          depends_on:
            - redis-service
            - minio-service

        minio-service:
          restart: unless-stopped
          image: minio/minio
          volumes:
            - minio_data:/data
          environment:
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
            MINIO_BROWSER: "off"
          command: server /data --console-address ":9001"
          healthcheck:
            test: "timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1"
            interval: 30s
            timeout: 20s
            retries: 3

        proxy-service:
          restart: unless-stopped
          ports:
            - "${MAIN_PORT}:10000"
          container_name: bbproxy
          image: budibase/proxy
          environment:
            - PROXY_RATE_LIMIT_WEBHOOKS_PER_SECOND=10
            - PROXY_RATE_LIMIT_API_PER_SECOND=20
            - APPS_UPSTREAM_URL=http://app-service:4002
            - WORKER_UPSTREAM_URL=http://worker-service:4003
            - MINIO_UPSTREAM_URL=http://minio-service:9000
            - COUCHDB_UPSTREAM_URL=http://couchdb-service:5984
            - WATCHTOWER_UPSTREAM_URL=http://watchtower-service:8080
            - RESOLVER=127.0.0.11
          depends_on:
            - minio-service
            - worker-service
            - app-service
            - couchdb-service

        couchdb-service:
          restart: unless-stopped
          image: budibase/couchdb
          environment:
            - COUCHDB_PASSWORD=${COUCH_DB_PASSWORD}
            - COUCHDB_USER=${COUCH_DB_USER}
            - TARGETBUILD=docker-compose
          volumes:
            - couchdb3_data:/opt/couchdb/data

        redis-service:
          restart: unless-stopped
          image: redis
          command: redis-server --requirepass "${REDIS_PASSWORD}"
          volumes:
            - redis_data:/data

        watchtower-service:
          restart: always
          image: containrrr/watchtower
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
          command: --debug --http-api-update bbapps bbworker bbproxy
          environment:
            - WATCHTOWER_HTTP_API=true
            - WATCHTOWER_HTTP_API_TOKEN=budibase
            - WATCHTOWER_CLEANUP=true
          labels:
            - "com.centurylinklabs.watchtower.enable=false"

      volumes:
        couchdb3_data:
          driver: local
        minio_data:
          driver: local
        redis_data:
          driver: local
    dest: /opt/budibase/docker-compose.yml
  delegate_to: '{{ inventory_hostname }}'

- name: Start Budibase container
  shell: docker compose up -d
  args:
    chdir: /opt/budibase
  become: yes
  delegate_to: '{{ inventory_hostname }}'
